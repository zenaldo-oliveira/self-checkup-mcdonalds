generator client {
  provider = "prisma-client-js" // Gera Prisma Client em JS para uso no código
}

datasource db {
  provider = "postgresql" // Banco de dados PostgreSQL
  url      = env("DATABASE_URL") // URL de conexão do banco via variável de ambiente
}

model Restaurant {
  id             String         @id @default(cuid())
  name           String
  slug           String @unique
  description    String
  avatarImageUrl String
  coverImageUrl  String
  menuCategory   MenuCategory[]
  products       Product[]
  orders         Order[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}


model MenuCategory {
  id           String     @id @default(cuid()) // ID único da categoria
  name         String // Nome da categoria
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade) // FK para restaurante
  restaurantId String // Campo FK restaurante
  products     Product[] // Relação 1:N com Product
  createdAt    DateTime   @default(now()) // Data criação (padronizado)
  updatedAt    DateTime   @updatedAt // Data atualização (padronizado)

  @@index([name]) // Índice para buscas por nome
}

model Product {
  id             String         @id @default(uuid()) // ID do produto com UUID
  name           String // Nome do produto
  description    String // Descrição
  price          Float // Preço
  imageUrl       String // URL da imagem
  ingredients    Json // Ingredientes em JSON
  orderProduct   OrderProduct[] // Relação 1:N com OrderProduct
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade) // FK para restaurante
  restaurantId   String // Campo FK restaurante
  menuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade) // FK categoria
  menuCategoryId String // Campo FK categoria
  createdAt      DateTime       @default(now()) // Data criação
  updatedAt      DateTime       @updatedAt // Data atualização
}

model Order {
  id                Int               @id @default(autoincrement()) // ID auto incrementado
  total             Float // Valor total do pedido
  status            OrderStatus // Status enum
  consumptionMethod ConsumptionMethod // Método de consumo enum
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade) // FK restaurante
  restaurantId      String // Campo FK restaurante
  createdAt         DateTime          @default(now()) // Data criação
  updatedAt         DateTime          @updatedAt // Data atualização
  orderItems        OrderProduct[] // Relação 1:N com itens do pedido
}

model OrderProduct {
  id        String   @id @default(cuid()) // ID do item pedido
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade) // FK para produto
  productId String // Campo FK produto
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade) // FK para pedido
  orderId   Int // Campo FK pedido
  quantity  Int // Quantidade do produto no pedido
  price     Float // Preço unitário (considera desconto, promoções etc)
  createdAt DateTime @default(now()) // Data criação do item
  updatedAt DateTime @updatedAt // Data atualização do item
}

enum OrderStatus {
  PENDING // Pedido pendente
  IN_PREPARATION // Pedido em preparação
  FINISHED // Pedido finalizado
}

enum ConsumptionMethod {
  TAKEAWAY // Pedido para viagem
  DINE_IN // Pedido para consumo no local
}
